---
title: "Module - TCR Quality"
author: "SCRATCH"
execute:
  freeze: auto
  cache: false
jupyter: python3
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 2
    code-fold: show
    code-tools: true
    fig-align: 'center'
    fig-format: png
    fig-responsive: true
lightbox:
    match: auto
    effect: zoom
    loop: true
---

```{python}
#| tags: [parameters]
#| include: False

import os

# Parameters
project_name         = "project"
path_vdj_folder      = "/Users/affaustino/Projects/SCRATCH-TCR/data/SCRATCH_ALIGN:CELLRANGER_VDJ/SRX5128514/;/Users/affaustino/Projects/SCRATCH-TCR/data/SCRATCH_ALIGN:CELLRANGER_VDJ/SRX5128513/;/Users/affaustino/Projects/SCRATCH-TCR/data/SCRATCH_ALIGN:CELLRANGER_VDJ/SRX5128512/;/Users/affaustino/Projects/SCRATCH-TCR/data/SCRATCH_ALIGN:CELLRANGER_VDJ/SRX5128528/;/Users/affaustino/Projects/SCRATCH-TCR/data/SCRATCH_ALIGN:CELLRANGER_VDJ/SRX5128527/"
meta_data_csv        = "/Users/affaustino/Projects/SCRATCH-TCR/data/pipeline_info/samplesheet.valid.csv"
clonotype_definition = "VDJ"

# Create data and figures
for folder in ['data', 'figures']: 
    os.makedirs(folder, exist_ok = True)

# Directory and outputs
work_directory       = os.getcwd()
output_object        = "{work_directory}/data/{project_name}_{object_label}".format(work_directory = work_directory, project_name = project_name, object_label = "tcr_repertoire_object.h5ad")

```

:::{.callout-important collapse="true"}
Here we will print the parameters
:::

## Importing packages

```{python}
#| output: false

import scanpy as sc
import scirpy as ir
import pandas as pd
import numpy as np
import seaborn as sb
import re

import session_info

sc.set_figure_params(figsize=(4, 4))

```

## Loading data

```{python}
#| output: false

adata_tcr_project = []

contigs_list = path_vdj_folder.split(';')
for sample_id in contigs_list:

  adata_tmp = ir.io.read_10x_vdj(os.path.join(sample_id, "outs", "filtered_contig_annotations.csv"))

  # Assign sample identifier
  adata_tmp.obs['sample'] = sample_id
  adata_tcr_project.append(adata_tmp) 

```

```{python}

meta_data = pd.read_csv(meta_data_csv)
meta_data.drop(columns=['fastq_1', 'fastq_2'], inplace=True)

meta_data.set_index('sample', inplace=True)

```

## Concatenate data

```{python}
#| output: false

adata_tcr = adata_tcr_project[0].concatenate(adata_tcr_project[1:])
print(f"Amount cells: {adata_tcr.n_obs}")

```

## Merging metadata

```{python}

adata_tcr.obs = pd.merge(
  adata_tcr.obs, meta_data, left_on='sample', right_index=True, how='left')

```
```{python}
#| include: false

# Working around on h5ad
adata_tcr_save = adata_tcr

adata_tcr.obs.head(5)

```

## Clonotype abundance

```{python}

ir.tl.chain_qc(adata_tcr)

```

```{python}
#| label: fig-rep-qc
#| fig-width: 15
#| fig-height: 10
#| fig-align: center

_ = ir.pl.group_abundance(adata_tcr, groupby = "sample", target_col = "chain_pairing", normalize = True)

```

## Clonotype definition

```{python}

ir.pp.ir_dist(adata_tcr, sequence = "aa")

```

```{python}

ir.tl.define_clonotype_clusters(
    adata_tcr, sequence = "aa", receptor_arms = clonotype_definition, dual_ir = "primary_only", n_jobs = 1
)

```

```{python}

ir.tl.clonotype_network(adata_tcr, min_cells = 50, sequence = "aa")
adata_tcr.obs["cc_aa_identity"] = adata_tcr.obs["cc_aa_identity"].astype("str")

```

::: {.panel-tabset}

## By sample

```{python}

# By sample

_ = ir.pl.group_abundance(
    adata_tcr,
    groupby = "cc_aa_identity",
    target_col = "sample",
    max_cols = 15,
    fig_kws = {"dpi": 100},
    figsize = [10, 10],
)

```

## By patient

```{python}

_ = ir.pl.group_abundance(
    adata_tcr,
    groupby = "cc_aa_identity",
    target_col = "patient_id",
    max_cols = 15,
    fig_kws = {"dpi": 100},
    figsize = [10, 10],
)

```

## By treatment

```{python}

_ = ir.pl.group_abundance(
    adata_tcr,
    groupby ="cc_aa_identity",
    target_col = "timepoint",
    max_cols = 15,
    fig_kws = {"dpi": 100},
    figsize = [10, 10],
)

```

:::

## Saving Data object

```{python}
#| cache: false

adata_tcr_save.write_h5ad(output_object)

```

## Session info

```{python}

session_info.show()

```
