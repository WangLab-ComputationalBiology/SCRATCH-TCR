---
title: "Module - TCR Quality"
author: "SCRATCH"
execute:
  freeze: auto
  cache: false
jupyter: python3
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 2
    embed-resources: true
    code-fold: show
    code-tools: true
    fig-format: png
    fig-dpi: 300
    fig-responsive: true
    fig-align: center
lightbox:
    match: auto
    effect: zoom
    loop: true
---

```{python}
#| tags: [parameters]
#| include: false

import os

# Parameters
project_name         = "project"
gex_anndata          = "/Users/affaustino/Projects/SCRATCH-TCR/data/project_celltypist_annotation_object.h5ad"
vdj_anndata          = "/Users/affaustino/Projects/SCRATCH-TCR/data/project_tcr_repertoire_object.h5ad"
clonotype_definition = "VDJ"

# Create data and figures
for folder in ['data', 'figures']: 
    os.makedirs(folder, exist_ok = True)

# Directory and outputs
work_directory       = os.getcwd()
output_object        = "{work_directory}/data/{project_name}_{object_label}".format(work_directory = work_directory, project_name = project_name, object_label = "gex_tcr_integration_object.h5mu")

```

:::{.callout-important collapse="true"}
Here we will print the parameters
:::

## Importing packages

```{python}
#| output: false

import scanpy as sc
import scirpy as ir
import pandas as pd
import numpy as np
import seaborn as sb

import mudata as md
from mudata import MuData

import session_info
from collections import defaultdict

sc.set_figure_params(figsize=(4, 4))

```

## Loading data

```{python}
#| output: false

adata_gex = sc.read(gex_anndata)
adata_tcr = sc.read(vdj_anndata)

```

```{python}

# Check for duplicates in obs_names
duplicates = adata_gex.obs_names.duplicated()
if duplicates.any():
    print(f"There are {duplicates.sum()} duplicate names in the dataset.")
else:
    print("No duplicates found. Check obs_names uniqueness in both datasets.")

```

```{python}

def append_counter_to_duplicates(names):
    name_count = defaultdict(int)
    new_names = []
    for name in names:
        if name_count[name] > 0:
            new_name = f"{name}-{name_count[name]}"
        else:
            new_name = name
        name_count[name] += 1
        new_names.append(new_name)
    return new_names

adata_gex.obs_names = append_counter_to_duplicates(adata_gex.obs_names)
adata_tcr.obs_names = append_counter_to_duplicates(adata_tcr.obs_names)

```

```{python}

# Check uniqueness in both datasets
print("Unique in adata_gex:", adata_gex.obs_names.is_unique)
print("Unique in adata_tcr:", adata_tcr.obs_names.is_unique)

```

## Checking expected overlap

```{python}

def overlapping_cells(adata_tcr, adata_gex):
    # Extract cell IDs from TCR and GEX datasets
    tcr_cells = set(adata_tcr.obs.index)
    gex_cells = set(adata_gex.obs.index)

    # Find intersection of cell IDs
    overlapping_cells = tcr_cells.intersection(gex_cells)

    # Calculate the number of overlapping cells
    num_overlapping_cells = len(overlapping_cells)
    return num_overlapping_cells

num_overlapping_cells = overlapping_cells(adata_tcr, adata_gex)
print("Number of overlapping cells:", num_overlapping_cells)

```

```{python}

if num_overlapping_cells == 0:

    # Fixing barcoding
    adata_gex.obs_names = [re.search(r"[ACGT]{16}-1", cell_id).group() for cell_id in adata_gex.obs_names]
    adata_tcr.obs_names = [re.search(r"[ACGT]{16}-1", cell_id).group() for cell_id in adata_tcr.obs_names]
    
num_overlapping_cells = overlapping_cells(adata_tcr, adata_gex)
print("Number of overlapping cells:", num_overlapping_cells)


```

## Merging GEX and TCR data

```{python}

mdata = MuData({"gex": adata_gex, "airr": adata_tcr})

```

## Calculating dimensions

```{python}

sc.pp.log1p(mdata["gex"])
sc.pp.pca(mdata["gex"], svd_solver="arpack")
sc.pp.neighbors(mdata["gex"])
sc.tl.umap(mdata["gex"])

```

## Clonotype QC

```{python}

ir.pp.index_chains(mdata)
ir.tl.chain_qc(mdata)

```

```{python}
#| label: fig-rep-qc
#| fig-width: 15
#| fig-height: 10
#| fig-align: center

_ = ir.pl.group_abundance(adata_tcr, groupby = "sample", target_col = "chain_pairing", normalize = True)

```

```{python}

print(
    "Fraction of cells with more than one pair of TCRs: {:.2f}".format(
        np.sum(mdata.obs["airr:chain_pairing"].isin(["extra VJ", "extra VDJ", "two full chains", "multichain"]))
        / mdata["airr"].n_obs
    )
)

```

## Clonotype UMAP

```{python}

mu.pl.embedding(mdata, basis="gex:umap", color="airr:chain_pairing", groups="multichain")

```

## Saving Data object

```{python}
#| cache: false

mdata.write(output_object)

```

## Session info

```{python}
#| echo: false

session_info.show()

``` 