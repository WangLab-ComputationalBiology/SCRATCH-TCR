---
title: "Module - TCR Quality"
author: "SCRATCH"
execute:
  freeze: auto
  cache: false
jupyter: python3
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 2
    code-fold: show
    code-tools: true
    fig-align: 'center'
    fig-format: png
    fig-responsive: true
  ipynb:
    prefer-html: true
lightbox:
    match: auto
    effect: zoom
    loop: true
format-links: [ipynb]
---

```{python}
#| tags: [parameters]
#| include: false

import os

# Parameters
project_name         = "Project"
annotation_anndata   = "/Users/affaustino/Projects/SCRATCH-QC/data/Project_celltypist_annotation.h5ad"
clonotype_anndata    = "/Users/affaustino/Projects/SCRATCH-QC/data/Project_tcr_repertoire.h5ad"
clonotype_definition = "VDJ"

# Directory and outputs
work_directory       = os.getcwd()
output_object        = "{work_directory}/{project_name}_{object_label}".format(work_directory = work_directory, project_name = project_name, object_label = "gex_tcr_integration.h5ad")

```

:::{.callout-important collapse="true"}

Here we will print the parameters

:::

# Project Name: Yost et al 2018

```{python}
#| output: false

import scanpy as sc
import scirpy as ir
import pandas as pd
import numpy as np
import seaborn as sb

import session_info
from collections import defaultdict

sc.set_figure_params(figsize=(4, 4))

```

## Loading data

```{python}
#| output: false

adata_gex = sc.read(annotation_anndata)
adata_tcr = sc.read(clonotype_anndata)

```

```{python}

adata_gex.obs_names = [name.split('_')[1] for name in adata_gex.obs_names]
adata_tcr.obs_names = [name[:-2] for name in adata_tcr.obs_names]

```

```{python}

# Check for duplicates in obs_names
duplicates = adata_gex.obs_names.duplicated()
if duplicates.any():
    print(f"There are {duplicates.sum()} duplicate names in the dataset.")
else:
    print("No duplicates found. Check obs_names uniqueness in both datasets.")

```

```{python}

def append_counter_to_duplicates(names):
    name_count = defaultdict(int)
    new_names = []
    for name in names:
        if name_count[name] > 0:
            new_name = f"{name}-{name_count[name]}"
        else:
            new_name = name
        name_count[name] += 1
        new_names.append(new_name)
    return new_names

adata_gex.obs_names = append_counter_to_duplicates(adata_gex.obs_names)
adata_tcr.obs_names = append_counter_to_duplicates(adata_tcr.obs_names)

```

```{python}

# Check uniqueness in both datasets
print("Unique in adata_gex:", adata_gex.obs_names.is_unique)
print("Unique in adata_tcr:", adata_tcr.obs_names.is_unique)

```

```{python}

# Drop the 'batch' column from the .obs DataFrame
adata_tcr.obs.drop('batch', axis=1, inplace=True)

```

## Merging GEX and TCR data

```{python}

ir.pp.merge_with_ir(adata_gex, adata_tcr)

```

```{python}

if 'has_ir' in adata_gex.obs.columns:
    num_cells_with_tcr = adata_gex.obs['has_ir'].replace({'True': True, 'False': False, 'None': False}).astype(bool).sum()
    print(f"Number of cells with TCR: {num_cells_with_tcr}")
else:
    print("No 'has_ir' field found. Check the correct annotation name.")

```
## Inspecting clustering

```{python}
#| fig-align: center
#| layout-ncol: 1
#| layout-nrow: 3

sc.pl.umap(
    adata_gex,
    color = "celltypist_cell_label_fine",
    frameon = False,
    sort_order = False,
    wspace = 1
)

sc.pl.umap(
    adata_gex,
    color = "celltypist_cell_label_coarse",
    frameon = False,
    sort_order = False,
    wspace = 1
)

sc.pl.umap(
    adata_gex,
    color = "has_ir",
    frameon = False,
    sort_order = False,
    wspace = 1
)

```

## Spectratype analyis

```{python}

adata_only_tcells = adata_gex[adata_gex.obs['celltypist_cell_label_fine'] == 'T cells'].copy()

```

```{python}
#| fig-width: 15
#| fig-height: 10
#| fig-align: center

ir.pl.spectratype(
    adata_only_tcells,
    color="celltypist_cell_label_coarse",
    viztype="curve",
    curve_layout="shifted",
    fig_kws={"figsize": [8, 4]},
    kde_kws={"kde_norm": False},
)

```

## Clone definition

```{python}

ir.tl.chain_qc(adata_only_tcells)

```

```{python}

ir.pp.ir_dist(adata_only_tcells, sequence="aa")

```

```{python}

ir.tl.define_clonotypes(adata_only_tcells, n_jobs = 1)
ir.tl.define_clonotype_clusters(
    adata_only_tcells, sequence="aa", receptor_arms = clonotype_definition, dual_ir="primary_only"
)

adata_only_tcells.obs["cc_aa_identity"] = adata_only_tcells.obs["cc_aa_identity"].astype("str")

```

## Clonal expansion

```{python}

ir.tl.clonal_expansion(adata_only_tcells, target_col="cc_aa_identity")

```

```{python}
#| fig-width: 15
#| fig-height: 10
#| fig-align: center

_ = ir.pl.clonal_expansion(
    adata_only_tcells,
    groupby="celltypist_cell_label_coarse",
    target_col="cc_aa_identity",
    clip_at=4,
    normalize=False,
    figsize=[10, 10],
)

```

## Clonotype residency

```{python}
#| fig-width: 15
#| fig-height: 10
#| fig-align: center

ir.pl.repertoire_overlap(
    adata_only_tcells, "Treatment", pair_to_plot=["pre", "post"], fig_kws={"dpi": 120})

```

## Saving Data object

```{python}
#| cache: false

adata_only_tcells.write_h5ad(output_object)

```

## Session info

```{python}
#| echo: false

session_info.show()

``` 